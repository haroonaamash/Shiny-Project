View(map_data2)
?geo_join
map_data2 <- ?geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD", how = 'inner')
manhattan.map = map_data2[map_data@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data@data$borough == "Queens", ]
bronx.map = map_data2[map_data@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data@data$borough == "Staten Island", ]
map_data2 <- ?geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
manhattan.map = map_data2[map_data@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data@data$borough == "Queens", ]
bronx.map = map_data2[map_data@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data@data$borough == "Staten Island", ]
map_data2 <- geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
manhattan.map = map_data2[map_data@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data@data$borough == "Queens", ]
bronx.map = map_data2[map_data@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data@data$borough == "Staten Island", ]
nyc_neighborhoods@data=as.array(as.factor(nyc_neighborhoods@data))
nyc_neighborhoods@data$neighborhood= toupper(nyc_neighborhoods@data$neighborhood)
map_data2 <- geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
map_data2 <- geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
historic.grouping$total.transaction.vol
pal <- colorNumeric("viridis", NULL)
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(total.transaction.vol),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2@data$n, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
HISTORICAL_ <- read_csv("HISTORICAL.csv")
historic.grouping <- HISTORICAL_ %>% group_by(BOROUGH,YEAR,TYPE.OF.HOME,NEIGHBORHOOD) %>%
summarise(n=n(), total.transaction.vol= mean(NUMBER.OF.SALES*MEDIAN.SALE.PRICE))  #consider doing only mean of median sale price
nyc_neighborhoods@data$neighborhood= toupper(nyc_neighborhoods@data$neighborhood)
map_data2 <- geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
rm(map_data2)
map_data2 <- geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
## global.R ##
library(readxl)
library(dplyr)
library(ggplot2)
library(leaflet)
library(rgdal) #read Geojson file
library(tigris) #geo_join
library(plotly)
library(shinythemes)
library(DT)
library(scales)
library(htmltools)
library(tidyr)
library(httr)
# read cleaned dataframe
NYCfinal <- read.csv('NYCFINAL.csv', stringsAsFactors = FALSE)
# read geocoded file
geo.coordinates <- read.csv('LATLON copy.csv', stringsAsFactors = FALSE)
geo.coordinates$the_geom= gsub(pattern = "POINT", replacement = "", geo.coordinates$the_geom)
geo.coordinates$the_geom= gsub("\\(|\\)", "", geo.coordinates$the_geom)
geo.coordinates$the_geom= gsub(pattern = " ", replacement = ":", geo.coordinates$the_geom)
geo.coordinates$the_geom=substr(geo.coordinates$the_geom, 2,45345464)
geo.coordinates= separate(geo.coordinates, the_geom, sep= ":",into = c('l1','l2'))
geo.coordinates= geo.coordinates %>% mutate(., Coor.dinates= paste(geo.coordinates$l2,":",geo.coordinates$l1))
geo.coordinates=geo.coordinates[,-c(2,3)]
# subsetting for datatable display                                  ###NOT SURE WHAT TO DO WITH THIS RN
#subset1 <- nyc %>% select(-residential.units, -commercial.units,-total.units,
#                         -tax.class.at.time.of.sale,-date,-apartment.number,-X,-neighborhood)
# read Geojson file
r <- GET('http://data.beta.nyc//dataset/0ff93d2d-90ba-457c-9f7e-39e47bf2ac5f/resource/35dd04fb-81b3-479b-a074-a27a37888ce7/download/d085e2f8d0b54d4590b1e7d1f35594c1pediacitiesnycneighborhoods.geojson')
nyc_neighborhoods <- readOGR(content(r,'text'), 'OGRGeoJSON', verbose = F)
# initialize spatial df for map FOR HISTORIC DATA
HISTORICAL_ <- read_csv("HISTORICAL.csv")
historic.grouping <- HISTORICAL_ %>% group_by(BOROUGH,YEAR,TYPE.OF.HOME,NEIGHBORHOOD) %>%
summarise(n=n(), total.transaction.vol= mean(NUMBER.OF.SALES*MEDIAN.SALE.PRICE))  #consider doing only mean of median sale price
nyc_neighborhoods@data$neighborhood= toupper(nyc_neighborhoods@data$neighborhood)
map_data2 <- geo_join(nyc_neighborhoods@data, historic.grouping, "neighborhood", "NEIGHBORHOOD")
manhattan.map = map_data2[map_data2@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data2@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data2@data$borough == "Queens", ]
bronx.map = map_data2[map_data2@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data2@data$borough == "Staten Island", ]
# create variables for choice
Parameters = c('Volume', 'Median Price');  ##we can probably change this
Select.Neighborhood = c('All',unique(NYCfinal[NYCfinal$BOROUGH == "Manhattan",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Queens",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Brooklyn",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Bronx",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Staten Island",]$NEIGHBORHOOD))
Select.Borough = c('All',unique(NYCfinal$BOROUGH))
map_data2 <- geo_join(nyc_neighborhoods, historic.grouping, "neighborhood", "NEIGHBORHOOD")
manhattan.map = map_data2[map_data2@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data2@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data2@data$borough == "Queens", ]
bronx.map = map_data2[map_data2@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data2@data$borough == "Staten Island", ]
Parameters = c('Volume', 'Median Price');  ##we can probably change this
Select.Neighborhood = c('All',unique(NYCfinal[NYCfinal$BOROUGH == "Manhattan",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Queens",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Brooklyn",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Bronx",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Staten Island",]$NEIGHBORHOOD))
Select.Borough = c('All',unique(NYCfinal$BOROUGH))
#####--------------------------------------------------------------------------------------------
View(map_data2)
map_data2@data[["total.transaction.vol"]]
pal <- colorNumeric("viridis", NULL)
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(map_data2$n),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2@data$n, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
pal <- colorNumeric("viridis", NULL)
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(map_data2$total.transaction.vol),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
map_data2@data[["n"]]
map_data2$neighborhood
historic.grouping$NEIGHBORHOOD
View(map_data2)
View(map_data2)
map_data2@data[["NEIGHBORHOOD"]]
class(map_data2@data[["NEIGHBORHOOD"]])
factor(map_data2@data[["NEIGHBORHOOD"]])
sum(is.na(historic.grouping$NEIGHBORHOOD))
factor(historic.grouping$NEIGHBORHOOD)
nyc_neighborhoods@data$neighborhood= toupper(nyc_neighborhoods@data$neighborhood)
View(nyc_neighborhoods)
View(nyc_neighborhoods)
?full_join
?left_join
historic.grouping= inner_join(nyc_neighborhoods,historic.grouping)
historic.grouping= inner_join(nyc_neighborhoods@data$neighborhood,historic.grouping)
historic.grouping$NEIGHBORHOOD  = as.factor(historic.grouping$NEIGHBORHOOD)
class(historic.grouping$NEIGHBORHOOD)
geo_join(nyc_neighborhoods,historic.grouping,"neighborhood", 'NEIGHBORHOOD')
temp = geo_join(nyc_neighborhoods,historic.grouping,"neighborhood", 'NEIGHBORHOOD')
View(temp)
temp = geo_join(nyc_neighborhoods,historic.grouping,"neighborhood", 'NEIGHBORHOOD', how = "full")
temp = geo_join(nyc_neighborhoods,historic.grouping,"neighborhood", 'NEIGHBORHOOD', how = "inner")
View(temp)
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x)))
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(1000000)))
sum(nyc_neighborhoods$neighborhood)
sum(is.na(nyc_neighborhoods$neighborhood))
sum(!is.na(nyc_neighborhoods$neighborhood))
sum(!is.na(historic.grouping$NEIGHBORHOOD)
sum(!is.na(historic.grouping$NEIGHBORHOOD))
sum(!is.na(unique(historic.grouping$NEIGHBORHOOD)))
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$n), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^4)))
pal <- colorNumeric("viridis", NULL)
leaflet(temp) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.9,
fillColor = ~pal(temp$total.transaction.vol),
label = ~paste0(temp$neighborhood, ": ", formatC(temp@data$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2@data$total.transaction.vol), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^4)))
class(historic.grouping$NEIGHBORHOOD)
class(nyc_neighborhoods$neighborhood)
View(temp)
temp@data
source('~/Desktop/Shiny Project 2/ShinyProject2/Global.R')
runApp()
leafletProxy( 'myMap',
data = map_data2@data$NEIGHBORHOOD) %>%
addPolygons(
smoothFactor = 0.5, fillOpacity = 0.7, fillColor = ~ pal(select()),
color = "white", dashArray = "1", weight = 1,
highlight = highlightOptions(weight = 2, color = "white",
fillOpacity = 1,bringToFront = TRUE),
label = ~ labels) %>%
clearControls() %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$element,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
leaflet( 'myMap',
data = map_data2@data$NEIGHBORHOOD) %>%
addPolygons(
smoothFactor = 0.5, fillOpacity = 0.7, fillColor = ~ pal(select()),
color = "white", dashArray = "1", weight = 1,
highlight = highlightOptions(weight = 2, color = "white",
fillOpacity = 1,bringToFront = TRUE),
label = ~ labels) %>%
clearControls() %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$element,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
class(map_data2$NEIGHBORHOOD)
class(map_data2$neighborhood)
map_data2$neighborhood=as.factor(map_data2$neighborhood)
map_data2$neighborhood=as.factor(map_data2$NEIGHBORHOOD)
map_data2$NEIGHBORHOOD=as.factor(map_data2$NEIGHBORHOOD)
map_data2$neighborhood=as.factor(map_data2$neighborhood)
leaflet( 'myMap',
data = map_data2@data$NEIGHBORHOOD) %>%
addPolygons(
smoothFactor = 0.5, fillOpacity = 0.7, fillColor = ~ pal(select()),
color = "white", dashArray = "1", weight = 1,
highlight = highlightOptions(weight = 2, color = "white",
fillOpacity = 1,bringToFront = TRUE),
label = ~ labels) %>%
clearControls() %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$element,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
?addPolygons
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(county, ": ", formatC(map_data2$total.transaction.vol, big.mark = ",")))
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ",")))
runApp()
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$element,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
pal <- colorNumeric("viridis", NULL)
labels <- paste("<strong>",map_data2@data$NEIGHBORHOOD,"</strong>",'<br/>',
"Total Transaction:", map_data2@data$total.transaction.vol, '<br/>',
"Median Price:", '$',format(map_data2@data$total.transaction.vol, big.mark = ',')
) %>% lapply(htmltools::HTML)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$element,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$element,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(county, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2$total.transaction.vol), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2$total.transaction.vol), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
runApp()
nyc_neighborhoods@data$neighborhood= toupper(nyc_neighborhoods@data$neighborhood)
map_data2 <- geo_join(nyc_neighborhoods, historic.grouping, "neighborhood", "NEIGHBORHOOD")
manhattan.map = map_data2[map_data2@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data2@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data2@data$borough == "Queens", ]
bronx.map = map_data2[map_data2@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data2@data$borough == "Staten Island", ]
HISTORICAL_ <- read_csv("HISTORICAL.csv")
historic.grouping <- HISTORICAL_ %>% group_by(BOROUGH,YEAR,TYPE.OF.HOME,NEIGHBORHOOD) %>%
summarise(n=n(), total.transaction.vol= mean(MEDIAN.SALE.PRICE))  #consider doing only mean of median sale price
nyc_neighborhoods@data$neighborhood= toupper(nyc_neighborhoods@data$neighborhood)
map_data2 <- geo_join(nyc_neighborhoods, historic.grouping, "neighborhood", "NEIGHBORHOOD")
manhattan.map = map_data2[map_data2@data$borough == "Manhattan", ]
brooklyn.map = map_data2[map_data2@data$borough == "Brooklyn", ]
queens.map = map_data2[map_data2@data$borough == "Queens", ]
bronx.map = map_data2[map_data2@data$borough == "Bronx", ]
statenisland.map = map_data2[map_data2@data$borough == "Staten Island", ]
arameters = c('Volume', 'Median Price');  ##we can probably change this
Select.Neighborhood = c('All',unique(NYCfinal[NYCfinal$BOROUGH == "Manhattan",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Queens",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Brooklyn",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Bronx",]$NEIGHBORHOOD),
unique(NYCfinal[NYCfinal$BOROUGH == "Staten Island",]$NEIGHBORHOOD))
Select.Borough = c('All',unique(NYCfinal$BOROUGH))
leafletProxy('myMAP', data = map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2$total.transaction.vol), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
leaflet('myMAP', data = map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2$total.transaction.vol), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(map_data2$total.transaction.vol)),
label = ~paste0(map_data2$neighborhood, ": ", formatC(map_data2$total.transaction.vol, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(map_data2$total.transaction.vol), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
source('~/Desktop/Shiny Project 2/ShinyProject2/Global.R')
runApp()
View(NYCfinal)
View(historic.grouping)
c(2005:2015)
source('~/Desktop/Shiny Project 2/ShinyProject2/Global.R')
runApp()
pal <- colorBin('YlOrRd', bins = bins(), domain = select())
labels <- paste("<strong>",map_data2@data$neighborhood,"</strong>",'<br/>',
"Total Transaction:", map_data2@data$total.transaction.vol) %>%
lapply(htmltools::HTML)
leafletProxy('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(select()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$Year,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
pal <- colorBin('YlOrRd', bins = bins(), domain = select())
labels <- paste("<strong>",map_data2@data$neighborhood,"</strong>",'<br/>',
"Total Transaction:", map_data2@data$total.transaction.vol) %>%
lapply(htmltools::HTML)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(select()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$Year,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(select()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$Year,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
choose1 <- reactive({
if (input$Year == c(2005:2015)) {
choose1 = group_by(map_data2@data$YEAR) %>% summarise(mean(map_data2@data$total.transaction.vol)) # select column n for map vlaue input
} else if (input$Year == 'Median Price') {
choose1 = group_by(map_data2@data$YEAR) %>% summarise(mean(map_data2@data$n))
}
})
pal <- colorBin('YlOrRd', bins = bins(), domain = choose1())
labels <- paste("<strong>",map_data2@data$neighborhood,"</strong>",'<br/>',
"Total Transaction:", map_data2@data$total.transaction.vol) %>%
lapply(htmltools::HTML)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(select()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = select(),
title = input$Year,
labFormat = labelFormat(prefix = " "),
opacity = 0.75)
runApp()
pal <- colorBin('YlOrRd', bins = bins(), domain = choose1())
labels <- paste("<strong>",map_data2@data$neighborhood,"</strong>",'<br/>',
"Total Transaction:", map_data2@data$total.transaction.vol) %>%
lapply(htmltools::HTML)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(choose1()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = choose1(),
title = input$Year,
labFormat = labelFormat(prefix = " "), opacity = 0.75)
leaflet('myMap', data= map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(choose1()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = choose1(),
title = input$Year,
labFormat = labelFormat(prefix = " "), opacity = 0.75)
leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(choose1()),
label = ~labels)
MAPSSS<- leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(choose1()),
label = ~labels) %>%
MAPSSS<- leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(choose1()),
label = ~labels) %>%
addLegend(
"bottomleft", pal = pal, values = choose1(),
title = input$Year,
labFormat = labelFormat(prefix = " "), opacity = 0.75)
MAPSSS<- leaflet(map_data2) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(choose1()),
label = ~labels)
runApp()
View(historic.grouping)
chart =
historic.grouping %>% filter(borough == 'Manhattan') %>%
group_by(TYPE.OF.HOME) %>%
summarise(n=n(),total.volume=median(total.transaction.vol))
chart2 =
historic.grouping %>% filter(borough == 'Manhattan') %>%
group_by(YEAR) %>%
summarise(n=n(),price=median(total.transaction.vol))
chart =
historic.grouping %>% filter(BOROUGH == 'Manhattan') %>%
group_by(TYPE.OF.HOME) %>%
summarise(n=n(),total.volume=median(total.transaction.vol))
chart2 =
historic.grouping %>% filter(BOROUGH == 'Manhattan') %>%
group_by(YEAR) %>%
summarise(n=n(),price=median(total.transaction.vol))
View(chart2)
View(chart)
View(chart2)
View(chart)
chart =
NYCfinal %>% filter(BOROUGH == 'Manhattan') %>%
group_by(TYPE.OF.HOME) %>%
summarise(n=n(),total.volume=median(total.transaction.vol))
source('~/Desktop/Shiny Project 2/ShinyProject2/Global.R')
runApp()
source('~/Desktop/Shiny Project 2/ShinyProject2/Global.R')
